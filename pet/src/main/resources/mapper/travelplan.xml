<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ssafy.pet.model.mapper.TravelPlanMapper">

	<insert id="insertPlan" parameterType="java.util.Map"
		useGeneratedKeys="true" keyProperty="id">
		INSERT INTO travel_plans(title,
		is_public, description, user_id)
		VALUES
		(
		#{title},
		#{is_public},
		#{description},
		(SELECT id FROM users WHERE user_id = #{user_id})
		);
	</insert>

	<insert id="insertPlanItem" parameterType="java.util.Map">
		INSERT INTO travel_plan_items(note, `order`, plan_id, content_id)
		VALUES
		<foreach collection="items" item="item" separator=",">
			(#{item.note}, #{item.order}, #{id}, #{item.content_id})
		</foreach>
	</insert>

	<update id="updatePlan" parameterType="java.util.Map">
		UPDATE travel_plans
		SET
		title = #{title}, end_at = now(), is_public = #{is_public},
		description = #{description}
		WHERE id = #{plan_id} and user_id =
		#{user_id}
	</update>

	<update id="updatePlanItem" parameterType="java.util.Map">
		<foreach collection="items" item="item" separator=";">
			UPDATE
			travel_plan_items
			SET `note`=#{item.note}, `order`=#{item.order},
			`content_id`=#{item.content_id}
			WHERE `id`=#{item.id} and
			`plan_id`=#{plan_id}
		</foreach>
	</update>

	<select id="findPlanById" parameterType="int"
		resultType="travelPlansDto">
		select * from travel_plans where id=#{id}
	</select>

	<select id="findPlanByUserIdAndId" parameterType="java.util.Map"
		resultType="travelPlansDto">
		select * from travel_plans where id=#{id} and
		user_id=#{user_id}
	</select>

	<select id="selectWithLimit" parameterType="int"
		resultType="travelPlansDto">
		select * from travel_plans
		limit #{page}, 6;
	</select>

	<select id="findItemById" parameterType="int" resultType="java.util.Map">
		select t.id, t.note, a.content_id, a.title, a.gugun_code, a.sido_code,
		a.content_type_id, a.latitude, a.longitude, a.addr1, t.`order` from
		travel_plan_items as t
		left join attractions as a
		on a.content_id = t.content_id
		where plan_id = #{id};
	</select>
	
	<select id="getOldestPlans" parameterType="int" resultType="TravelPlansDto">
		select * 
		from travel_plans
		order by created_at asc
		limit #{page_start}, #{page_size; 
	</select>
	
	<select id="getNewestPlans" parameterType="int" resultType="TravelPlansDto">
		select * 
		from travel_plans
		order by created_at desc
		limit #{page_start}, #{page_size; 
	</select>
	
	<select id="getPlansByMostViews" parameterType="int" resultType="TravelPlansDto">
		select *
		from travel_plans
		order by view_cnt desc
		limit #{page_start}, #{page_size;
	</select>
	
	<select id="getComments" parameterType="int" resultType="String">
		WITH RECURSIVE CommentHierarchy AS (
	    SELECT 
	        id AS comment_id,
	        plan_id,
	        user_id,
	        comment,
	        created_at,
	        updated_at,
	        parent_comment_id,
	        id AS top_comment_id
	    FROM travel_plan_comments
	    WHERE parent_comment_id IS NULL
	
	    UNION ALL
	
	    SELECT 
	        c.id AS comment_id,
	        c.plan_id,
	        c.user_id,
	        c.comment,
	        c.created_at,
	        c.updated_at,
	        c.parent_comment_id,
	        h.top_comment_id
	    FROM travel_plan_comments c
	    INNER JOIN CommentHierarchy h
	        ON c.parent_comment_id = h.comment_id
		)
		
		SELECT comment
		FROM CommentHierarchy
		WHERE plan_id = #{plan_id}
		ORDER BY top_comment_id, created_at;
	</select>
	
	
</mapper>

